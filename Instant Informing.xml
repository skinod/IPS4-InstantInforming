<?xml version="1.0" encoding="UTF-8"?>
<plugin name="Instant Informing" version_long="10004" version_human="1.0.4" author="Sijad aka Mr.Wosi" website="http://skinod..com" update_check="http://skinod.com/updatechk/sodinstantinforming"><hooks><hook type="C" class="\IPS\core\modules\front\system\ajax"><![CDATA[//<?php

class hook44 extends _HOOK_CLASS_
{
	public function sodGettingInformed() {
		try
		{
			$result = array( 'result' => 'ok', 'count' => array() );
	
			if(\IPS\Member::loggedIn()->member_id) {
				\IPS\Member::loggedIn()->recountNotifications();
				$result['count']['notifications'] = \IPS\Member::loggedIn()->notification_cnt;
	
				// \IPS\core\Messenger\Conversation::rebuildMessageCounts( \IPS\Member::loggedIn() );
				$result['count']['inbox'] = \IPS\Member::loggedIn()->msg_count_new;
	
				if( \IPS\Member::loggedIn()->canAccessModule( \IPS\Application\Module::get( 'core', 'modcp' ) ) and \IPS\Member::loggedIn()->modPermission('can_view_reports')) {
					$result['count']['reports'] = \IPS\Member::loggedIn()->reportCount();
				}
			}else{
				$result['result'] = 'fail';
			}
	
			\IPS\Output::i()->json( $result );
		}
		catch ( \RuntimeException $e )
		{
			if ( method_exists( get_parent_class(), __FUNCTION__ ) )
			{
				return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
			}
			else
			{
				throw $e;
			}
		}
	}

	public function sodGettingInformedOptions() {
		try
		{
			if(!\IPS\Member::loggedIn()->member_id) {
				$result = array('result' => 'fail');
			}else{
				\IPS\Settings::i()->sod_instant_informing_interval = intval(\IPS\Settings::i()->sod_instant_informing_interval);
				$result = array( 'result' => 'ok', 'interval' => \IPS\Settings::i()->sod_instant_informing_interval?\IPS\Settings::i()->sod_instant_informing_interval:10 );
			}
			\IPS\Output::i()->json( $result );
		}
		catch ( \RuntimeException $e )
		{
			if ( method_exists( get_parent_class(), __FUNCTION__ ) )
			{
				return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
			}
			else
			{
				throw $e;
			}
		}
	}

}]]></hook></hooks><settings><setting><key>sod_instant_informing_interval</key><default>10</default></setting></settings><settingsCode><![CDATA[//<?php

$form->add( new \IPS\Helpers\Form\Number( 'sod_instant_informing_interval', \IPS\Settings::i()->sod_instant_informing_interval, TRUE, array(), NULL, NULL, \IPS\Member::loggedIn()->language()->addToStack('seconds') ) );

if ( $values = $form->values() )
{
	$form->saveAsSettings();
	return TRUE;
}

return $form;]]></settingsCode><htmlFiles/><cssFiles/><jsFiles><js filename="sodInstantInforming.js">LyoqCiAqIEF1dGhvcjogU2lqYWQgYWthIG1yLndvc2kKICogU2l0ZTogaHR0cDovL3NraW5vZC5jb20KICogQ29weXJpZ2h0IChjKSAyMDE1IFNraW5vZCAtIGh0dHA6Ly9za2lub2QuY29tCiAqLwo7KCBmdW5jdGlvbigkLCBfLCB1bmRlZmluZWQpewoJInVzZSBzdHJpY3QiOwoKCXZhciBpbmZvcm1lciA9IGZ1bmN0aW9uKHNjb3BlLCBvcHRpb25zKSB7CgkJdmFyIGRlZmF1bHRzID0gewoJCQlpbnRlcnZhbDogMTAKCQl9OwoKCgoJCXRoaXMub3B0aW9ucyA9IF8uZGVmYXVsdHMoIG9wdGlvbnMsIGRlZmF1bHRzICk7CgkJdGhpcy5vcHRpb25zLmludGVydmFsICo9IDEwMDA7CgkJdGhpcy5zY29wZSA9ICQoc2NvcGUpOwoJCXRoaXMudGl0bGUgPSBkb2N1bWVudC50aXRsZTsKCQl0aGlzLmluaXQoKQoJfQoKCWluZm9ybWVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKSB7CQkKCQl0aGlzLm5vdGlmaWNhdGlvbnMgCT0gdGhpcy5zY29wZS5maW5kKCcuY05vdGlmaWNhdGlvbnMuY1VzZXJOYXZfaWNvbiA+IGEnKTsKCQl0aGlzLmluYm94IAkJCT0gdGhpcy5zY29wZS5maW5kKCcuY0luYm94LmNVc2VyTmF2X2ljb24gPiBhJyk7CgkJdGhpcy5yZXBvcnRzIAkJPSB0aGlzLnNjb3BlLmZpbmQoJy5jUmVwb3J0cy5jVXNlck5hdl9pY29uID4gYScpOwoJCXRoaXMudG90YWwJCQk9ICQoJ1tkYXRhLWlwc2RyYXdlci1kcmF3ZXJlbGVtPSIjZWxNb2JpbGVEcmF3ZXIiXScpOwoJCXRoaXMudGFiQWN0aXZlIAkJPSBmYWxzZTsKCgkJJCh3aW5kb3cpLmJpbmQoImZvY3VzIiwgJC5wcm94eSh0aGlzLnRpdGxlT2ZmLCB0aGlzKSk7CgkJJCh3aW5kb3cpLmJpbmQoImJsdXIiLCAkLnByb3h5KHRoaXMuc2V0VGFiQWN0aXZlLCB0aGlzKSk7CgoJCXRoaXMuc2V0dXBJbnRlcnZhbCgpOwoJfTsKCglpbmZvcm1lci5wcm90b3R5cGUuc2V0dXBJbnRlcnZhbCA9IGZ1bmN0aW9uKCkgewoJCXZhciBzZWxmID0gdGhpczsKCQlzZWxmLmludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewoJCQlpZihzZWxmLmxhc3RBamF4KQoJCQkJc2VsZi5sYXN0QWpheC5hYm9ydCgpOwoJCQlzZWxmLmxhc3RBamF4ID0gaXBzLmdldEFqYXgoKSggaXBzLmdldFNldHRpbmcoJ2Jhc2VVUkwnKSArICc/YXBwPWNvcmUmbW9kdWxlPXN5c3RlbSZjb250cm9sbGVyPWFqYXgmZG89c29kR2V0dGluZ0luZm9ybWVkJykuZG9uZShmdW5jdGlvbiggcmVzcG9uc2UgKXsKCQkJCWlmKHJlc3BvbnNlLnJlc3VsdCA9PSAnb2snKSB7CgkJCQkJdmFyIHRvdGFsID0gMDsKCQkJCQkkLmVhY2gocmVzcG9uc2UuY291bnQsIGZ1bmN0aW9uKGspIHsKCQkJCQkJaWYoc2VsZltrXSAhPSB1bmRlZmluZWQpIHsKCQkJCQkJCXNlbGZba10uZmluZCgnLmlwc05vdGlmaWNhdGlvbkNvdW50JykucmVtb3ZlKCk7CgkJCQkJCQlpZih0aGlzICE9ICcwJykgewoJCQkJCQkJCXNlbGZba10uYXBwZW5kKGlwcy50ZW1wbGF0ZXMucmVuZGVyKCdzb2QuSW5zdGFudEluZm9ybWluZy5jb3VudCcsIHtjb3VudDogdGhpc30pKTsKCQkJCQkJCQl0b3RhbCArPSBwYXJzZUludCh0aGlzKTsKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0pOwoJCQkJCXNlbGYudG90YWwuZmluZCgnLmlwc05vdGlmaWNhdGlvbkNvdW50JykucmVtb3ZlKCk7CgkJCQkJc2VsZi50b3RhbC5hcHBlbmQoaXBzLnRlbXBsYXRlcy5yZW5kZXIoJ3NvZC5JbnN0YW50SW5mb3JtaW5nLmNvdW50Jywge2NvdW50OiB0b3RhbH0pKTsKCQkJCQlzZWxmLnRvdGFsQ291bnQgPSB0b3RhbDsKCQkJCQlzZWxmLnRpdGxlT24oKTsKCQkJCX1lbHNlewoJCQkJCWNsZWFySW50ZXJ2YWwoc2VsZi5pbnRlcnZhbCk7CgkJCQl9CgkJCX0pOwoJCX0sIHRoaXMub3B0aW9ucy5pbnRlcnZhbCk7Cgl9OwoKCWluZm9ybWVyLnByb3RvdHlwZS50aXRsZU9uID0gZnVuY3Rpb24oKSB7CgkJaWYoIXRoaXMudGFiQWN0aXZlICYmIHRoaXMudG90YWxDb3VudCA+IDApIHsKCQkJdGhpcy50aXRsZU9uViA9IHRydWU7CgkJCWRvY3VtZW50LnRpdGxlID0gIigiICsgdGhpcy50b3RhbENvdW50ICsgIikgIiArIHRoaXMudGl0bGU7CgkJfQoJfQoKCWluZm9ybWVyLnByb3RvdHlwZS50aXRsZU9mZiA9IGZ1bmN0aW9uKCkgewoJCXRoaXMudGFiQWN0aXZlID0gdHJ1ZTsKCQlpZih0aGlzLnRpdGxlT25WKSB7CgkJCXZhciBzZWxmID0gdGhpczsKCQkJc2V0VGltZW91dChmdW5jdGlvbigpIHtkb2N1bWVudC50aXRsZSA9IHNlbGYudGl0bGU7fSwgMTApOwkJCQoJCX0KCX0KCQoJaW5mb3JtZXIucHJvdG90eXBlLnNldFRhYkFjdGl2ZSA9IGZ1bmN0aW9uKCkgewoJCXRoaXMudGFiQWN0aXZlID0gZmFsc2U7Cgl9CgoJJChmdW5jdGlvbigpIHsKCQlpcHMuZ2V0QWpheCgpKCBpcHMuZ2V0U2V0dGluZygnYmFzZVVSTCcpICsgJz9hcHA9Y29yZSZtb2R1bGU9c3lzdGVtJmNvbnRyb2xsZXI9YWpheCZkbz1zb2RHZXR0aW5nSW5mb3JtZWRPcHRpb25zJykuYWx3YXlzKGZ1bmN0aW9uKCByZXNwb25zZSApIHsKCQkJaWYocmVzcG9uc2UucmVzdWx0ID09ICdmYWlsJykKCQkJCXJldHVybjsKCQkJbmV3IGluZm9ybWVyKCQoJyNlbFVzZXJOYXYnKS5hZGQoJyNlbFVzZXJOYXZfbW9iaWxlJyksIHtpbnRlcnZhbDogcmVzcG9uc2UuaW50ZXJ2YWx9KTsKCQl9KTsKCX0pOwoKfShqUXVlcnksIF8pKTsK</js></jsFiles><resourcesFiles/><lang><word key="sod_instant_informing_interval" js="0">Ajax Interval</word></lang><versions><version long="10003" human="1.0.3"><![CDATA[//<?php


/* To prevent PHP errors (extending class does not exist) revealing path */
if ( !defined( '\IPS\SUITE_UNIQUE_KEY' ) )
{
	header( ( isset( $_SERVER['SERVER_PROTOCOL'] ) ? $_SERVER['SERVER_PROTOCOL'] : 'HTTP/1.0' ) . ' 403 Forbidden' );
	exit;
}

/**
 * 1.0.3 Upgrade Code
 */
class ips_plugins_setup_upg_10003
{
	/**
	 * ...
	 *
	 * @return	array	If returns TRUE, upgrader will proceed to next step. If it returns any other value, it will set this as the value of the 'extra' GET parameter and rerun this step (useful for loops)
	 */
	public function step1()
	{
		\IPS\Db::i()->delete( 'core_members', "name = '' and email = ''");
	}
}]]></version><version long="10004" human="1.0.4"><![CDATA[//<?php


/* To prevent PHP errors (extending class does not exist) revealing path */
if ( !defined( '\IPS\SUITE_UNIQUE_KEY' ) )
{
	header( ( isset( $_SERVER['SERVER_PROTOCOL'] ) ? $_SERVER['SERVER_PROTOCOL'] : 'HTTP/1.0' ) . ' 403 Forbidden' );
	exit;
}

/**
 * 1.0.4 Upgrade Code
 */
class ips_plugins_setup_upg_10004
{
	/**
	 * ...
	 *
	 * @return	array	If returns TRUE, upgrader will proceed to next step. If it returns any other value, it will set this as the value of the 'extra' GET parameter and rerun this step (useful for loops)
	 */
	public function step1()
	{
	}
	
	// You can create as many additional methods (step2, step3, etc.) as is necessary.
	// Each step will be executed in a new HTTP request
}]]></version></versions></plugin>
